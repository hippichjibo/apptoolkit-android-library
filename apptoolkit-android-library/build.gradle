apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: "kotlin-android"
apply plugin: 'kotlin-android-extensions'
apply plugin: 'org.jetbrains.dokka-android'

repositories {
    maven { url "http://artifactory.jibo.com/artifactory/Android_maven" }
    mavenCentral()
    flatDir{
        dirs 'libs'
    }
}

def getRepositoryUsername() {
    return hasProperty('artifactory_user') ? artifactory_user : ""
}

def getRepositoryPassword() {
    return hasProperty('artifactory_password') ? artifactory_password : ""
}

def getReleaseRepositoryUrl() {
    return hasProperty('artifactory_contextUrl') ? artifactory_contextUrl
            : "http://artifactory.jibo.com/artifactory/Android_maven"
}

android {

    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION

    defaultConfig {
        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
        versionCode Integer.parseInt(project.VERSION_CODE)
        versionName project.VERSION_NAME
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    dokka {
        moduleName = 'apptoolkit-android-library'
        outputFormat = 'html'
        outputDirectory = "$buildDir/doc"

        // Use to include or exclude non public members.
        includeNonPublic = false

        // Emit warnings about not documented members. Applies globally, also can be overridden by packageOptions
        reportUndocumented = false

        skipEmptyPackages = true // Do not create index pages for empty packages
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${property('kotlin.version')}"
    implementation 'com.jibo.apptoolkit:apptoolkit-java-protocol:0.2.3'
    implementation 'com.google.code.gson:gson:2.8.2'

    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.1.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.8.0'

    implementation 'com.android.support:appcompat-v7:27.1.0'

    testImplementation 'junit:junit:4.12'
    testImplementation "javax.websocket:javax.websocket-api:1.1"
    testImplementation "org.glassfish.tyrus:tyrus-server:1.1"
    testImplementation "org.glassfish.tyrus:tyrus-container-grizzly:1.1"

    androidTestImplementation 'com.android.support:support-annotations:27.1.0'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
}

task deploy {
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                //repository(url: "~/.m2/repository")

//                repository(url: getReleaseRepositoryUrl()) {
//                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
//                }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: "$mavenUser", password: "$mavenPassword")
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: "$mavenUser", password: "$mavenPassword")
                }

                pom.groupId = GROUP
                pom.version = project.VERSION_NAME

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license  {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                        }
                    }
                    dependencies {
                        dependency {
                            groupId 'com.google.code.gson'
                            artifactId 'gson'
                            version '2.7'
                        }
                        dependency {
                            groupId 'com.squareup.okhttp3'
                            artifactId 'okhttp'
                            version '3.8.0'
                        }
                        dependency {
                            groupId 'com.squareup.retrofit2'
                            artifactId 'retrofit'
                            version '2.3.0'
                        }
                        dependency {
                            groupId 'com.squareup.retrofit2'
                            artifactId 'converter-gson'
                            version '2.1.0'
                        }
                        dependency {
                            groupId 'com.squareup.okhttp3'
                            artifactId 'logging-interceptor'
                            version '3.8.0'
                        }
                    }
                }
            }
        }
    }

    signing {
        required { gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task packageDokka(type: Jar, dependsOn: 'dokka') {
        from file("$buildDir/doc")
        classifier = 'doc'
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

    artifacts {
        archives androidSourcesJar
        archives packageDokka
    }
}
